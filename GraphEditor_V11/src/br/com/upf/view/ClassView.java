/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.upf.view;

import br.com.upf.beans.Attribute;
import br.com.upf.beans.ClassElement;
import br.com.upf.beans.ClassModel;
import br.com.upf.beans.DiagramOfClassModel;
import br.com.upf.view.internalframe.ClassEditor;
import com.mxgraph.model.mxCell;
import com.mxgraph.swing.handler.mxCellHandler;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;

/**
 *
 * @author GiordaniAntonio
 */
public class ClassView extends javax.swing.JComponent {

    /**
     *
     */
    private static final long serialVersionUID = 2106746763664760745L;

    /**
     *
     */
    public static final String IMAGE_PATH = "/br/com/upf/images/";

    /**
     *
     */
    protected static JTableRenderer dragSource = null;

    /**
     *
     */
    protected static int sourceRow = 0;

    /**
     *
     */
    protected Object object;

    /**
     *
     */
    private mxCell cell;

    /**
     *
     */
    protected mxGraphComponent classGraphComponent;

    /**
     *
     */
    protected mxGraph graph;

    /**
     *
     */
    public JTable table;

    /**
     *
     */
    private ClassEditor classEditor;

    /**
     *
     */
    private DiagramOfClassModel diagramOfClassModel;

    /**
     *
     */
    private ClassModel classModel;

    /**
     *
     */
    private ClassElement classElement;

    /**
     *
     */
    private Integer rowClickAttributes = -1;

    /**
     *
     */
    private Attribute selectedAttribute;

    /**
     * Creates new form JTableRendererGiordani
     *
     * @param cellObject
     * @param graphContainer
     * @param classEditor
     * @param diagramModel
     */
    public ClassView(final Object cellObject,
            final mxGraphComponent graphContainer, ClassEditor classEditor, DiagramOfClassModel diagramModel) {
        initComponents();
        this.object = cellObject;
        this.classGraphComponent = graphContainer;
        this.graph = graphContainer.getGraph();
        this.classEditor = classEditor;
        this.diagramOfClassModel = diagramModel;

        if (object instanceof mxCell) {
            this.cell = (mxCell) object;
            if (cell.getValue() instanceof ClassModel) {
                this.classModel = (ClassModel) cell.getValue();
                this.classElement = diagramOfClassModel.getClassElement(classModel.getId());
                classElement.setClassView(this);
            } else {
                this.classModel = null;
                this.classElement = null;
            }
        } else {
            this.cell = null;
            JOptionPane.showMessageDialog(graphContainer, "Cell null");
        }

        ResizeHandler resizeHandler = new ResizeHandler();
        jLabelResize.addMouseListener(resizeHandler);
        jLabelResize.addMouseMotionListener(resizeHandler);

        updateContext();
    }

    /**
     * Atualiza visualização dos dados da Classe
     */
    public void updateContext() {
        if (classModel != null) {
            updateName();
            attributesLoad();
        }
    }

    /**
     * Atualiza o Nome da classe
     */
    private void updateName() {
        jLabelClassName.setText(classModel.getName());
    }

    /**
     * Carrega os elementos
     *
     * @param attribute
     * @return
     */
    private boolean attributesLoad() {
        listAttributes.clear();
        return listAttributes.addAll(classModel.getAttributes());
    }

    /**
     *
     * @param e
     */
    protected void showGraphPopupMenu(MouseEvent e) {
        Point pt = SwingUtilities.convertPoint(e.getComponent(), e.getPoint(),
                classGraphComponent);
        new ClassEditorPopupMenu(classEditor, classElement).show(classGraphComponent, pt.x, pt.y);
        e.consume();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        listAttributes = new LinkedList<Attribute>();
        jPanelMain = new javax.swing.JPanel();
        jPanelNorth = new javax.swing.JPanel();
        jLabelClassName = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanelCenter = new javax.swing.JPanel();
        jScrollPaneAttributes = new javax.swing.JScrollPane();
        jListAttributes = new javax.swing.JList();
        jPanelSouth = new javax.swing.JPanel();
        jPanelSouthResize = new javax.swing.JPanel();
        jLabelResize = new javax.swing.JLabel();

        listAttributes = org.jdesktop.observablecollections.ObservableCollections.observableList(listAttributes);

        setInheritsPopupMenu(true);
        setMinimumSize(new java.awt.Dimension(100, 100));
        setLayout(new java.awt.BorderLayout());

        jPanelMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(160, 160, 160)));
        jPanelMain.setInheritsPopupMenu(true);
        jPanelMain.setLayout(new java.awt.BorderLayout());

        jPanelNorth.setPreferredSize(new java.awt.Dimension(198, 50));
        jPanelNorth.setLayout(new java.awt.BorderLayout());

        jLabelClassName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelClassName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelClassName.setText("jLabel1");
        jPanelNorth.add(jLabelClassName, java.awt.BorderLayout.CENTER);
        jPanelNorth.add(jSeparator1, java.awt.BorderLayout.SOUTH);

        jPanelMain.add(jPanelNorth, java.awt.BorderLayout.NORTH);

        jPanelCenter.setInheritsPopupMenu(true);
        jPanelCenter.setLayout(new java.awt.BorderLayout());

        jScrollPaneAttributes.setBorder(null);

        jListAttributes.setBackground(new java.awt.Color(240, 240, 240));
        jListAttributes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListAttributes.setInheritsPopupMenu(true);

        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listAttributes, jListAttributes);
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${resume}"));
        bindingGroup.addBinding(jListBinding);

        jListAttributes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jListAttributesMouseReleased(evt);
            }
        });
        jScrollPaneAttributes.setViewportView(jListAttributes);

        jPanelCenter.add(jScrollPaneAttributes, java.awt.BorderLayout.CENTER);

        jPanelMain.add(jPanelCenter, java.awt.BorderLayout.CENTER);

        jPanelSouth.setPreferredSize(new java.awt.Dimension(198, 50));
        jPanelSouth.setLayout(new java.awt.BorderLayout());

        jPanelSouthResize.setPreferredSize(new java.awt.Dimension(41, 25));
        jPanelSouthResize.setLayout(new java.awt.BorderLayout());

        jLabelResize.setCursor(new java.awt.Cursor(java.awt.Cursor.SE_RESIZE_CURSOR));
        jLabelResize.setPreferredSize(new java.awt.Dimension(25, 25));
        jPanelSouthResize.add(jLabelResize, java.awt.BorderLayout.EAST);

        jPanelSouth.add(jPanelSouthResize, java.awt.BorderLayout.SOUTH);

        jPanelMain.add(jPanelSouth, java.awt.BorderLayout.SOUTH);

        add(jPanelMain, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Gerencia Seleção de Atributos da lista
     *
     * @param evt
     */
    private void jListAttributesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListAttributesMouseReleased
        if (evt.getButton() == 1) {
            if (rowClickAttributes != -1) {
                // Limpa Seleção    
                if (rowClickAttributes == jListAttributes.getSelectedIndex()) {
                    jListAttributes.clearSelection();
                    rowClickAttributes = jListAttributes.getSelectedIndex();
                } else {
                    // Seleciona novo
                    rowClickAttributes = jListAttributes.getSelectedIndex();
                }
            } else {
                rowClickAttributes = jListAttributes.getSelectedIndex();
            }
            evt.consume();
        }
        if (evt.isPopupTrigger()) {
            showGraphPopupMenu(evt);
        }
    }//GEN-LAST:event_jListAttributesMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelClassName;
    private javax.swing.JLabel jLabelResize;
    private javax.swing.JList jListAttributes;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelNorth;
    private javax.swing.JPanel jPanelSouth;
    private javax.swing.JPanel jPanelSouthResize;
    private javax.swing.JScrollPane jScrollPaneAttributes;
    private javax.swing.JSeparator jSeparator1;
    private java.util.List<Attribute> listAttributes;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public Attribute getSelectedAttribute() {
        if ((rowClickAttributes != -1) && (rowClickAttributes < listAttributes.size())) {
            selectedAttribute = listAttributes.get(rowClickAttributes);
            return selectedAttribute;
        }
        return null;
    }

    public void setSelectedAttribute(Attribute selectedAttribute) {
        this.selectedAttribute = selectedAttribute;
    }

    /**
     * Implements an event redirector for the specified handle index, where 0 is
     * the top right, and 1-7 are the top center, rop right, middle left, middle
     * right, bottom left, bottom center and bottom right, respectively. Default
     * index is 7 (bottom right).
     */
    public class ResizeHandler implements MouseListener, MouseMotionListener {

        protected int index;

        public ResizeHandler() {
            this(7);
        }

        public ResizeHandler(int index) {
            this.index = index;
        }

        public void mouseClicked(MouseEvent e) {
            // ignore
        }

        public void mouseEntered(MouseEvent e) {
            // ignore
        }

        public void mouseExited(MouseEvent e) {
            // ignore
        }

        public void mousePressed(MouseEvent e) {
            // Selects to create a handler for resizing
            if (!graph.isCellSelected(object)) {
                classGraphComponent.selectCellForEvent(object, e);
            }

            // Initiates a resize event in the handler
            mxCellHandler handler = classGraphComponent.getSelectionCellsHandler().getHandler(object);

            if (handler != null) {
                // Starts the resize at index 7 (bottom right)
                handler.start(SwingUtilities.convertMouseEvent((Component) e
                        .getSource(), e, classGraphComponent.getGraphControl()),
                        index);
                e.consume();
            }
        }

        public void mouseReleased(MouseEvent e) {
            classGraphComponent.getGraphControl().dispatchEvent(SwingUtilities.convertMouseEvent((Component) e.getSource(),
                    e, classGraphComponent.getGraphControl()));
        }

        public void mouseDragged(MouseEvent e) {
            classGraphComponent.getGraphControl().dispatchEvent(SwingUtilities.convertMouseEvent((Component) e.getSource(),
                    e, classGraphComponent.getGraphControl()));
        }

        public void mouseMoved(MouseEvent e) {
            // ignore
        }
    }

    /**
     * Método para criar um vertice JTableRendered
     */
    public static JTableRenderer getVertex(Component component) {
        while (component != null) {
            if (component instanceof JTableRenderer) {
                return (JTableRenderer) component;
            }
            component = component.getParent();
        }

        return null;
    }

}
