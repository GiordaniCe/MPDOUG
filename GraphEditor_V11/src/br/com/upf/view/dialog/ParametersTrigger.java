/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.upf.view.dialog;

import br.com.upf.beans.Attribute;
import br.com.upf.beans.ClassElement;
import br.com.upf.beans.ClassModel;
import br.com.upf.view.GraphEditor;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;

/**
 *
 * @author GiordaniAntonio
 */
public class ParametersTrigger extends javax.swing.JDialog {

    private static final long serialVersionUID = 8316581030222069504L;

    private GraphEditor graphEditor;

    private ClassElement classElement;

    private ClassModel classModel;

    private ArrayList<Attribute> attributes;

    private ArrayList<Attribute> AttributesMonitorable;

    private ArrayList<Attribute> AttributeNotMonitorable;

    /**
     * Creates new form ParametersTriggersView
     */
    public ParametersTrigger(GraphEditor editor, ClassElement element) {
        super(editor, true);
        this.graphEditor = editor;
        this.classElement = element;
        this.classModel = classElement.getClassModel();
        this.attributes = classModel.getAttributes();
        initComponents();
        //jButtonAdd.setEnabled(false);
        //jButtonRemove.setEnabled(false);

        updateTitle();
        loadDisplayAttributes();
    }

    private void updateTitle() {
        this.setTitle("Parâmetros - Dicionário de Estados");
    }

    private void loadDisplayAttributes() {
        // Carrega as expressoes para o attribute
        listAttributesMonitorable.clear();
        listAttributesNotMonitorable.clear();
        for (int i = 0; i < attributes.size(); i++) {
            if (attributes.get(i).isMonitorable()) {
                listAttributesMonitorable.add(attributes.get(i));
            } else {
                listAttributesNotMonitorable.add(attributes.get(i));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        listAttributesMonitorable =  new LinkedList<Attribute>();
        listAttributesNotMonitorable =  new LinkedList<Attribute>();
        jPanelCenter = new javax.swing.JPanel();
        jPanelTitles = new javax.swing.JPanel();
        jLabelNotMonitor = new javax.swing.JLabel();
        jLabelMonitor = new javax.swing.JLabel();
        jLabelEmpty = new javax.swing.JLabel();
        jPanelContent = new javax.swing.JPanel();
        jPanelNotMonitorable = new javax.swing.JPanel();
        jScrollPaneNotMonitorable = new javax.swing.JScrollPane();
        jListNotMonitorable = new javax.swing.JList();
        jPanelMonitorable = new javax.swing.JPanel();
        jScrollPaneMonitorable = new javax.swing.JScrollPane();
        jListMonitorable = new javax.swing.JList();
        jPanelManager = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jPanelSouth = new javax.swing.JPanel();
        jButtonDictionaryOfStates = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        listAttributesMonitorable = org.jdesktop.observablecollections.ObservableCollections.observableList(listAttributesMonitorable);

        listAttributesNotMonitorable = org.jdesktop.observablecollections.ObservableCollections.observableList(listAttributesNotMonitorable);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 445));
        setResizable(false);

        jPanelCenter.setLayout(new java.awt.BorderLayout());

        jPanelTitles.setPreferredSize(new java.awt.Dimension(850, 45));
        jPanelTitles.setLayout(new java.awt.BorderLayout());

        jLabelNotMonitor.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelNotMonitor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelNotMonitor.setText("Não Monitorável");
        jLabelNotMonitor.setToolTipText("Atributos não Monitorados");
        jLabelNotMonitor.setPreferredSize(new java.awt.Dimension(210, 16));
        jPanelTitles.add(jLabelNotMonitor, java.awt.BorderLayout.LINE_START);

        jLabelMonitor.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelMonitor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMonitor.setText("Monitorável");
        jLabelMonitor.setToolTipText("Atributos Monitorados");
        jLabelMonitor.setPreferredSize(new java.awt.Dimension(210, 16));
        jPanelTitles.add(jLabelMonitor, java.awt.BorderLayout.LINE_END);

        jLabelEmpty.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanelTitles.add(jLabelEmpty, java.awt.BorderLayout.CENTER);

        jPanelCenter.add(jPanelTitles, java.awt.BorderLayout.NORTH);

        jPanelContent.setLayout(new java.awt.BorderLayout());

        jPanelNotMonitorable.setPreferredSize(new java.awt.Dimension(210, 365));
        jPanelNotMonitorable.setLayout(new java.awt.BorderLayout());

        jListNotMonitorable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jListNotMonitorable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listAttributesNotMonitorable, jListNotMonitorable);
        bindingGroup.addBinding(jListBinding);

        jListNotMonitorable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListNotMonitorableMouseClicked(evt);
            }
        });
        jScrollPaneNotMonitorable.setViewportView(jListNotMonitorable);

        jPanelNotMonitorable.add(jScrollPaneNotMonitorable, java.awt.BorderLayout.CENTER);

        jPanelContent.add(jPanelNotMonitorable, java.awt.BorderLayout.LINE_START);

        jPanelMonitorable.setPreferredSize(new java.awt.Dimension(210, 365));
        jPanelMonitorable.setLayout(new java.awt.BorderLayout());

        jListMonitorable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listAttributesMonitorable, jListMonitorable);
        bindingGroup.addBinding(jListBinding);

        jListMonitorable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListMonitorableMouseClicked(evt);
            }
        });
        jScrollPaneMonitorable.setViewportView(jListMonitorable);

        jPanelMonitorable.add(jScrollPaneMonitorable, java.awt.BorderLayout.CENTER);

        jPanelContent.add(jPanelMonitorable, java.awt.BorderLayout.LINE_END);

        jButtonAdd.setText(">>");
        jButtonAdd.setToolTipText("Adicionar");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jListNotMonitorable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement!=null}"), jButtonAdd, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonRemove.setText("<<");
        jButtonRemove.setToolTipText("Remover");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jListMonitorable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement!=null}"), jButtonRemove, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelManagerLayout = new javax.swing.GroupLayout(jPanelManager);
        jPanelManager.setLayout(jPanelManagerLayout);
        jPanelManagerLayout.setHorizontalGroup(
            jPanelManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManagerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelManagerLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAdd, jButtonRemove});

        jPanelManagerLayout.setVerticalGroup(
            jPanelManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(274, 274, 274))
        );

        jPanelContent.add(jPanelManager, java.awt.BorderLayout.CENTER);

        jPanelCenter.add(jPanelContent, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelCenter, java.awt.BorderLayout.CENTER);

        jPanelSouth.setPreferredSize(new java.awt.Dimension(850, 45));

        jButtonDictionaryOfStates.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonDictionaryOfStates.setText("Salvar");
        jButtonDictionaryOfStates.setToolTipText("Salvar e prosseguir");
        jButtonDictionaryOfStates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDictionaryOfStatesActionPerformed(evt);
            }
        });

        jButtonCancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonCancel.setText("Cancelar");
        jButtonCancel.setToolTipText("");
        jButtonCancel.setPreferredSize(new java.awt.Dimension(90, 25));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSouthLayout = new javax.swing.GroupLayout(jPanelSouth);
        jPanelSouth.setLayout(jPanelSouthLayout);
        jPanelSouthLayout.setHorizontalGroup(
            jPanelSouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSouthLayout.createSequentialGroup()
                .addContainerGap(170, Short.MAX_VALUE)
                .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDictionaryOfStates, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelSouthLayout.setVerticalGroup(
            jPanelSouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSouthLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanelSouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDictionaryOfStates, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanelSouth, java.awt.BorderLayout.SOUTH);

        bindingGroup.bind();

        setBounds(0, 0, 518, 297);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jListNotMonitorableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListNotMonitorableMouseClicked
        if (rowClickNotMonitorable != -1) {
            if (rowClickNotMonitorable == jListNotMonitorable.getSelectedIndex()) {
                jListNotMonitorable.clearSelection();
                rowClickNotMonitorable = jListNotMonitorable.getSelectedIndex();
            }
            rowClickNotMonitorable = jListNotMonitorable.getSelectedIndex();
        } else {
            rowClickNotMonitorable = jListNotMonitorable.getSelectedIndex();
        }
//
//        if (rowClickNotMonitorable == -1) {
//            jButtonAdd.setEnabled(false);
//        } else {
//            jButtonAdd.setEnabled(true);
//        }

    }//GEN-LAST:event_jListNotMonitorableMouseClicked

    private void jListMonitorableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListMonitorableMouseClicked
        if (rowClickMonitorable != -1) {
            if (rowClickMonitorable == jListMonitorable.getSelectedIndex()) {
                jListMonitorable.clearSelection();
                rowClickMonitorable = jListMonitorable.getSelectedIndex();
            }
            rowClickMonitorable = jListMonitorable.getSelectedIndex();
        } else {
            rowClickMonitorable = jListMonitorable.getSelectedIndex();
        }
//
//        if (rowClickMonitorable == -1) {
//            jButtonRemove.setEnabled(false);
//        } else {
//            jButtonRemove.setEnabled(true);
//        }

    }//GEN-LAST:event_jListMonitorableMouseClicked

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        if (jListNotMonitorable.getSelectedValue() != null) {
            if (jListNotMonitorable.getSelectedValue() instanceof Attribute) {
                Attribute currentAttribute = (Attribute) jListNotMonitorable.getSelectedValue();
                listAttributesNotMonitorable.remove(currentAttribute);
                listAttributesMonitorable.add(currentAttribute);
            }
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        if (jListMonitorable.getSelectedValue() != null) {
            if (jListMonitorable.getSelectedValue() instanceof Attribute) {
                Attribute currentAttribute = (Attribute) jListMonitorable.getSelectedValue();
                listAttributesMonitorable.remove(currentAttribute);
                listAttributesNotMonitorable.add(currentAttribute);
            }
        }
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonDictionaryOfStatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDictionaryOfStatesActionPerformed
        if (listAttributesMonitorable.size() > 0) {
            for (int i = 0; i < listAttributesMonitorable.size(); i++) {
                if (listAttributesMonitorable.get(i) instanceof Attribute) {
                    Attribute currentAttribute = listAttributesMonitorable.get(i);
                    currentAttribute.setMonitorable(true);
                }
            }
            for (int i = 0; i < listAttributesNotMonitorable.size(); i++) {
                if (listAttributesNotMonitorable.get(i) instanceof Attribute) {
                    Attribute currentAttribute = listAttributesNotMonitorable.get(i);
                    currentAttribute.setMonitorable(false);
                }
            }
            if (!classModel.isInitializedDictionaryOfStates()) {
                this.setVisible(false);
                graphEditor.methodElaborationDictionaryView(classElement);
                if (classModel.isMethodElaborationCustom()) {
                    graphEditor.dictionaryOfStatesMethodCustomView(classElement);
                } else {
                    graphEditor.dictionaryOfStatesMethodStandartView(classElement);
                }
            } else {
                this.setVisible(false);
            }

        } else {
            JOptionPane.showMessageDialog(graphEditor, "Informe o's' Atributo's' que deseja Monitorar!", "Validação", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonDictionaryOfStatesActionPerformed

    private Integer rowClickNotMonitorable = -1;
    private Integer rowClickMonitorable = -1;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDictionaryOfStates;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JLabel jLabelEmpty;
    private javax.swing.JLabel jLabelMonitor;
    private javax.swing.JLabel jLabelNotMonitor;
    private javax.swing.JList jListMonitorable;
    private javax.swing.JList jListNotMonitorable;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JPanel jPanelManager;
    private javax.swing.JPanel jPanelMonitorable;
    private javax.swing.JPanel jPanelNotMonitorable;
    private javax.swing.JPanel jPanelSouth;
    private javax.swing.JPanel jPanelTitles;
    private javax.swing.JScrollPane jScrollPaneMonitorable;
    private javax.swing.JScrollPane jScrollPaneNotMonitorable;
    private java.util.List<Attribute> listAttributesMonitorable;
    private java.util.List<Attribute> listAttributesNotMonitorable;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
